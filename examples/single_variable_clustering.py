# -*- coding: utf-8 -*-
"""Single_variable_clustering_0302.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ELgMKJCLK0_oUC6J0QT7CoiW4uuyfta4
"""

import numpy as np
import numpy.random as rnd
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import scipy as sp

# generate a set of normal data
mu    = 10
sigma = 0.1

# Normal operation (training data)
data_train = np.random.normal(mu, sigma, 600)
plt.plot(data_train)
plt.show()
plt.hist(data_train, 20, density=True, facecolor='g', alpha=0.75)
plt.show()

Data_train=pd.DataFrame(data_train,columns=['values'])# pandas form (dataframe) normal data

# generate data with anomaly
# operation with mu obey poisson distribution

mu = 10
sigma = 0.1
reaction = np.random.normal(mu, sigma, 100)

experiment = 50
changeRate = 1.01

print(reaction)

samples_mu_poisson = []

for i in range(len(reaction)):
    samples_mu_poisson.append(reaction[i])

possion_variable = np.random.poisson(0.05, experiment);

for i in range(0, experiment):
    mu = mu * (changeRate ** possion_variable[i])
    sigma = sigma * (changeRate ** possion_variable[i])
    reaction = np.random.normal(mu, sigma, 10)
    for i in range(len(reaction)):
        samples_mu_poisson.append(reaction[i])

x = np.linspace(0, experiment, experiment * 10 + 100)

plt.plot(x, samples_mu_poisson)
plt.title('Anomaly genetation against time')
plt.xlabel('Time')
plt.ylabel('Reactor Outcome')
plt.show()

Data_test=pd.DataFrame(samples_mu_poisson,columns=['values']) # pandas form (dataframe) normal data

Data_test

# take samples from labeled normal data

n=50 # number of data each sample
gap =10 # gap between each sample

# create a list of data frames containing 10 rows each
points_n=pd.DataFrame([[Data_train.iloc[i:i+n].values.mean(),Data_train.iloc[i:i+n].values.std()] for i in range(0, len(Data_train)-n+1, gap)],columns=["mu","sigma"])

# Create a scatter plot with dots
plt.scatter(points_n.mu,points_n.sigma)

# Add labels and title
plt.xlabel("mean")
plt.ylabel("standard deviation")
plt.title("mu-sigma of normal data")

# Show the plot
plt.show()

points_n

# use K-means method to find centroid of normal data

from pandas.core.internals.concat import concatenate_managers
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from scipy.stats import chisquare
import scipy

## Scaling the Data

scaler = StandardScaler()
scaled_features = scaler.fit_transform(points_n)
scaled_features

## K-means for finding the centroid, essentially the mean.

def find_centroid(distribution, n):
  scaler = StandardScaler()
  scaled_features = scaler.fit_transform(distribution)
  scaled_features

  kmeans = KMeans(
            init="random",
            n_clusters=n,
            n_init=10,
            max_iter=300,
            random_state=1
         )
  kmeans.fit(scaled_features)
  center = scaler.inverse_transform(kmeans.cluster_centers_)

  return center

center_initial = find_centroid(points_n,1)

# Create a scatter plot with dots
plt.scatter(points_n.mu,points_n.sigma,label='sample')
plt.scatter(center_initial[0,0],center_initial[0,1],label='centroid')

# Add labels and title
plt.xlabel("mean")
plt.ylabel("standard deviation")
plt.title("mu-sigma")
plt.legend(loc='lower left',fontsize=12)
plt.axis([9.8,10.2,0.06,0.13])

# Show the plot
plt.show()

center_initial

# test data with anomaly

# create a list of data frames containing 10 rows each
points_a = pd.DataFrame([[Data_test.iloc[i:i+n].values.mean(),Data_test.iloc[i:i+n].values.std()] for i in range(0, len(Data_test)-n+1, gap)],columns=["mu","sigma"])

# Create a scatter plot with dots
plt.scatter(points_a.mu, points_a.sigma)

# Add labels and title
plt.xlabel("mean")
plt.ylabel("standard deviation")
plt.title("mu-sigma of data with anomaly")

# Show the plot
plt.show()

points_a

points_combine=[find_centroid(points_n, 1).tolist()[0]]
points_x=points_n.copy(deep=True)
for i in range(0,56):
    points_x=points_x.append(points_a.iloc[i:i+1], ignore_index=True)
    points_combine.append(find_centroid(points_x, 1).tolist()[0])

center_track = pd.DataFrame(points_combine,columns=["mu","sigma"])
center_track

# Create a scatter plot with dots
plt.scatter(points_a.mu, points_a.sigma,s=40,label='points')
plt.scatter(center_track.mu[0],center_track.sigma[0],c='red',s=120,label='initial centroid')
plt.scatter(center_track.mu, center_track.sigma,c='pink',s=60,label='track centroid')

# Add labels and title
plt.xlabel("mean")
plt.ylabel("standard deviation")
plt.title("mu-sigma of data with anomaly")
plt.legend(loc='lower left',fontsize=12)
plt.axis([9.6,10.6,0.06,0.16])

# Show the plot
plt.show()

from scipy.spatial.distance import mahalanobis

points_a_array = points_a.values
points_n_array = points_n.values

# Compute the Mahalanobis distance between each normal data point and the cluster centers
distances_n = []
for i in range(points_n_array.shape[0]):
    points_cov = [center_initial[0], points_n_array[i]]
    cov = np.cov(points_cov, rowvar=False) # calculate the covariance matrix
    distances_n.append(mahalanobis(points_n_array[i], center_initial[0], cov))

# Identify anomalies with a Mahalanobis distance above a threshold
threshold = np.mean(distances_n) +  3 * np.std(distances_n)

# Compute the Mahalanobis distance between each data point (with anomaly) and the cluster centers
distances_a = []
for i in range(points_n_array.shape[0]):
    points_cov = [center_initial[0], points_a_array[i]]
    cov = np.cov(points_cov, rowvar=False) # calculate the covariance matrix
    distances_a.append(mahalanobis(points_a_array[i], center_initial[0], cov))

anomalies = np.where(np.array(distances_a) > threshold)[0]
anomalies

# Create a scatter plot with dots
plt.scatter(points_a.mu, points_a.sigma,s=40,label='points')
plt.scatter(center_track.mu[0],center_track.sigma[0],c='red',s=120,label='initial centroid')
plt.scatter(points_a.mu[anomalies],points_a.sigma[anomalies],c='pink',s=60,label='anomalies')

# Add labels and title
plt.xlabel("mean")
plt.ylabel("standard deviation")
plt.title("mu-sigma of data with anomaly")
plt.legend(loc='lower left',fontsize=12)
plt.axis([9.6,10.6,0.06,0.16])

# Show the plot
plt.show()